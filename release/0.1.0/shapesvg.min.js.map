{"version":3,"file":"shapesvg.min.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport type STROKE_LINEJOIN = \"bevel\" | \"round\" | \"miter\" | \"miter-clip\" | \"arcs\";\nexport const CLASS_NAME = \"__shape-svg\";\n","import { CLASS_NAME, STROKE_LINEJOIN } from \"./consts\";\n\ninterface SVGInterface {\n  left?: number;\n  top?: number;\n  right?: number;\n  bottom?: number;\n  side?: number;\n  split?: number;\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  strokeLinejoin?: STROKE_LINEJOIN;\n  innerRadius?: number;\n  [key: string]: any;\n}\n\nfunction makeDOM(tag: string) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction makeSVGDOM() {\n  const el = makeDOM(\"svg\");\n\n  el.setAttribute(\"class\", CLASS_NAME);\n  return el;\n}\nfunction setAttributes(element: SVGElement, attributes: {[key: string]: any}) {\n  for (const name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n}\nfunction setStyles(element: SVGElement, styles: {[key: string]: any}) {\n  const cssText = [];\n\n  for (const name in styles) {\n    cssText.push(`${name}:${styles[name]};`);\n  }\n  element.style.cssText += cssText.join(\"\");\n}\nexport function getRect({\n  left = 0,\n  top = 0,\n  side = 3,\n  rotate = 0,\n  innerRadius = 100,\n  height = 0,\n  split = 1,\n  width = height ? 0 : 100,\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n}: SVGInterface) {\n  let xPoints: number[] = [];\n  let yPoints: number[] = [];\n  const sideCos = Math.cos(Math.PI / side);\n  const startRad = Math.PI / 180 * rotate +  Math.PI * ((side % 2 ? 0 : 1 / side) - 1 / 2);\n\n  for (let i = 0; i < side; ++i) {\n    const rad = Math.PI * (1 / side * 2 * i) + startRad;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    xPoints.push(cos);\n    yPoints.push(sin);\n    if (innerRadius !== 100) {\n      if (sideCos <= innerRadius / 100) {\n        continue;\n      } else {\n        xPoints.push(innerRadius / 100 * Math.cos(rad + Math.PI / side));\n        yPoints.push(innerRadius / 100 * Math.sin(rad + Math.PI / side));\n      }\n    }\n  }\n  const minX = Math.min(...xPoints);\n  const minY = Math.min(...yPoints);\n  const maxX = Math.max(...xPoints);\n  const maxY = Math.max(...yPoints);\n  const isWidth = !!width;\n  const scale = isWidth ? width / (maxX - minX) : height / (maxY - minY);\n  const isOuter = strokeLinejoin === \"miter\" || strokeLinejoin === \"arcs\" || strokeLinejoin === \"miter-clip\";\n\n  const sideSin = Math.sin(Math.PI / side);\n  const innerCos = Math.min(sideCos, innerRadius / 100);\n  const innerScale = scale * innerCos;\n  const diagonal = strokeWidth / 2 / (sideCos === innerCos ? 1 : Math.sin(Math.atan(sideSin / (sideCos - innerCos))));\n  const outerScale = isOuter ? (innerScale + diagonal) / innerScale : 1;\n  const pos = isOuter ? 0 : strokeWidth / 2;\n\n  xPoints = xPoints.map(xp => (xp - minX * outerScale) * scale + pos);\n  yPoints = yPoints.map(yp => (yp - minY * outerScale) * scale + pos);\n\n  const pathWidth = (maxX - minX) * outerScale * scale + pos * 2;\n  const pathHeight = (maxY - minY) * outerScale * scale + pos * 2;\n  const length = xPoints.length;\n  const points = [];\n\n  points.push([left + xPoints[0], top + yPoints[0]]);\n  for (let i = 1; i <= length; ++i) {\n    const x1 = xPoints[i - 1];\n    const y1 = yPoints[i - 1];\n    const x2 = xPoints[i === length ? 0 : i];\n    const y2 = yPoints[i === length ? 0 : i];\n\n    for (let j = 1; j <= split; ++j) {\n      const x = (x1 * (split - j) + x2 * j) / split;\n      const y = (y1 * (split - j) + y2 * j) / split;\n\n      points.push([left + x, top + y]);\n    }\n  }\n\n  return {points, width: pathWidth, height: pathHeight};\n}\nexport function getPath(points: number[][]) {\n  return points.map((point, i) => {\n      return `${i === 0 ? \"M\" : \"L\"} ${point.join(\" \")}`;\n  }).join(\" \") + \" Z\";\n}\nexport function be(path: SVGPathElement, {\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  side,\n  split,\n  rotate,\n  innerRadius,\n  height,\n  width,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  ...attributes\n}: SVGInterface,   container?: SVGElement) {\n  const {points, width: pathWidth, height: pathHeight } =\n    getRect({left, top, split, side, rotate, width, height, innerRadius, strokeLinejoin, strokeWidth});\n\n  if (container && container.getAttribute(\"class\") === CLASS_NAME) {\n    container.setAttribute(\"viewBox\", `0 0 ${left + pathWidth + right} ${top + pathHeight + bottom}`);\n  }\n  let d = getPath(points);\n\n  css && (d = `path('${d}')`);\n\n  (css ? setStyles : setAttributes)(path, {\n    fill,\n    d,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n}\nexport function star({\n  side = 3,\n  innerRadius = 60 * Math.cos(Math.PI / side),\n}: SVGInterface,     container?: SVGAElement) {\n  return poly({...arguments[0], innerRadius}, container);\n}\nexport function poly(options: SVGInterface, container: SVGElement = makeSVGDOM()) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n\n  be(path, options, container);\n  container.appendChild(path);\n  return container;\n}\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["CLASS_NAME","makeDOM","tag","document","createElementNS","getRect","_a","_b","left","_c","top","_d","side","_e","rotate","_f","innerRadius","_g","height","_h","split","_j","width","_k","strokeLinejoin","_l","strokeWidth","xPoints","yPoints","sideCos","Math","cos","PI","startRad","i","rad","sin","push","minX","min","minY","maxX","max","maxY","scale","isOuter","sideSin","innerCos","innerScale","diagonal","atan","outerScale","pos","map","xp","yp","pathWidth","pathHeight","length","points","x1","y1","x2","y2","j","x","y","getPath","point","join","be","path","container","right","bottom","fill","css","attributes","getAttribute","setAttribute","d","element","styles","cssText","name","style","poly","options","el","appendChild"],"mappings":"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"}