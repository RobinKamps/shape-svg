{"version":3,"file":"shapesvg.common.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport type STROKE_LINEJOIN = \"bevel\" | \"round\" | \"miter\" | \"miter-clip\" | \"arcs\";\nexport const CLASS_NAME = \"__shape-svg\";\n","import { CLASS_NAME, STROKE_LINEJOIN } from \"./consts\";\nimport {hasClass, addClass, splitUnit} from \"@daybrush/utils\";\n\nexport interface Shape {\n    left?: number;\n    top?: number;\n    right?: number;\n    bottom?: number;\n    width?: number;\n    height?: number;\n    fill?: string;\n    strokeLinejoin?: STROKE_LINEJOIN;\n    strokeWidth?: number;\n    className?: string;\n    origin?: string | number;\n    [key: string]: any;\n}\nexport interface RoundRectShape extends Shape {\n  round?: number;\n  css?: boolean;\n}\nexport interface PolyShape extends Shape {\n  side?: number;\n  split?: number;\n  css?: boolean;\n  innerRadius?: number;\n}\nexport interface OvalShape extends Shape {\n  r?: number;\n  rx?: number;\n  ry?: number;\n}\nfunction makeDOM(tag: string) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction makeSVGDOM() {\n  const el = makeDOM(\"svg\");\n\n  addClass(el, CLASS_NAME);\n  return el;\n}\nfunction setAttributes(element: SVGElement, attributes: {[key: string]: any}) {\n  for (const name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n}\nfunction setStyles(element: SVGElement, styles: {[key: string]: any}) {\n  const cssText = [];\n\n  for (const name in styles) {\n    cssText.push(`${name}:${styles[name]};`);\n  }\n  element.style.cssText += cssText.join(\"\");\n}\nfunction getAbsoluteValue(value: string, pos: number, size: number) {\n  const info = splitUnit(value);\n\n  if (info.unit === \"%\") {\n    return (pos + size * info.value / 100) + \"px\";\n  } else if (info.unit === \"px\") {\n    return (pos + info.value) + \"px\";\n  } else {\n    return `calc(${pos}px + ${value})`;\n  }\n}\nfunction setOrigin(container: SVGElement, {\n  width,\n  height,\n  left,\n  top,\n  origin,\n}: {\n  width: number,\n  height: number,\n  left: number,\n  top: number,\n  origin: string | number,\n}) {\n  if (!origin) {\n    return;\n  }\n  let [ox, oy = ox]: string[] = `${origin}`.split(\" \");\n\n  ox = getAbsoluteValue(ox, left, width);\n  oy = getAbsoluteValue(oy, top, height);\n\n  container.style.transformOrigin = `${ox} ${oy}`;\n}\nfunction setViewBox(container: SVGElement, {\n  width,\n  height,\n  left,\n  right,\n  bottom,\n  top,\n  strokeWidth,\n  className,\n}: {\n  width: number,\n  height: number,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  strokeWidth: number,\n  className?: string,\n}) {\n  if (container && hasClass(container, CLASS_NAME)) {\n    className && className.split(\" \").forEach(name => {\n      addClass(container, name);\n    });\n    const [, , boxWidth = 0, boxHeight = 0] = (container.getAttribute(\"viewBox\") || \"\").split(\" \")\n      .map(pos => parseFloat(pos || \"0\"));\n\n    container.setAttribute(\"viewBox\", \"0 0 \" +\n    // tslint:disable-next-line:max-line-length\n    `${Math.max(left + width + right + strokeWidth, boxWidth)} ${Math.max(top + height + bottom + strokeWidth, boxHeight)}`);\n  }\n}\n\nexport function getRect({\n  left = 0,\n  top = 0,\n  side = 3,\n  rotate = 0,\n  innerRadius = 100,\n  height = 0,\n  split = 1,\n  width = height ? 0 : 100,\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n}: PolyShape) {\n  let xPoints: number[] = [];\n  let yPoints: number[] = [];\n  const sideCos = Math.cos(Math.PI / side);\n  const startRad = Math.PI / 180 * rotate +  Math.PI * ((side % 2 ? 0 : 1 / side) - 1 / 2);\n\n  for (let i = 0; i < side; ++i) {\n    const rad = Math.PI * (1 / side * 2 * i) + startRad;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    xPoints.push(cos);\n    yPoints.push(sin);\n    if (innerRadius !== 100) {\n      if (sideCos <= innerRadius / 100) {\n        continue;\n      } else {\n        xPoints.push(innerRadius / 100 * Math.cos(rad + Math.PI / side));\n        yPoints.push(innerRadius / 100 * Math.sin(rad + Math.PI / side));\n      }\n    }\n  }\n  const minX = Math.min(...xPoints);\n  const minY = Math.min(...yPoints);\n  const maxX = Math.max(...xPoints);\n  const maxY = Math.max(...yPoints);\n  const isWidth = !!width;\n  const scale = isWidth ? width / (maxX - minX) : height / (maxY - minY);\n  const isOuter = strokeLinejoin === \"miter\" || strokeLinejoin === \"arcs\" || strokeLinejoin === \"miter-clip\";\n\n  const sideSin = Math.sin(Math.PI / side);\n  const innerCos = Math.min(sideCos, innerRadius / 100);\n  const innerScale = scale * innerCos;\n  const diagonal = strokeWidth / 2 / (sideCos === innerCos ? 1 : Math.sin(Math.atan(sideSin / (sideCos - innerCos))));\n  const outerScale = isOuter ? (innerScale + diagonal) / innerScale : 1;\n  const pos = isOuter ? 0 : strokeWidth / 2;\n\n  xPoints = xPoints.map(xp => (xp - minX * outerScale) * scale + pos);\n  yPoints = yPoints.map(yp => (yp - minY * outerScale) * scale + pos);\n\n  const pathWidth = (maxX - minX) * outerScale * scale + pos * 2;\n  const pathHeight = (maxY - minY) * outerScale * scale + pos * 2;\n  const length = xPoints.length;\n  const points = [];\n\n  points.push([left + xPoints[0], top + yPoints[0]]);\n  for (let i = 1; i <= length; ++i) {\n    const x1 = xPoints[i - 1];\n    const y1 = yPoints[i - 1];\n    const x2 = xPoints[i === length ? 0 : i];\n    const y2 = yPoints[i === length ? 0 : i];\n\n    for (let j = 1; j <= split; ++j) {\n      const x = (x1 * (split - j) + x2 * j) / split;\n      const y = (y1 * (split - j) + y2 * j) / split;\n\n      points.push([left + x, top + y]);\n    }\n  }\n\n  return {points, width: pathWidth, height: pathHeight};\n}\nexport function getPath(points: number[][]) {\n  return points.map((point, i) => {\n      return `${i === 0 ? \"M\" : \"L\"} ${point.join(\" \")}`;\n  }).join(\" \") + \" Z\";\n}\nexport function be(path: SVGPathElement, {\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  side,\n  split,\n  rotate,\n  innerRadius,\n  height,\n  width,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  className,\n  ...attributes\n}: PolyShape,      container?: SVGElement) {\n  const {points, width: pathWidth, height: pathHeight } =\n    getRect({left, top, split, side, rotate, width, height, innerRadius, strokeLinejoin, strokeWidth});\n\n  setViewBox(container, {\n      left,\n      top,\n      bottom,\n      right,\n      className,\n      strokeWidth: 0,\n      width: pathWidth,\n      height: pathHeight,\n    });\n  const d = getPath(points);\n\n  css ? setStyles(path, {d : `path('${d}')`}) : setAttributes(path, {d});\n\n  setAttributes(path, {\n    fill,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n}\nexport function star({\n  side = 3,\n  innerRadius = 60 * Math.cos(Math.PI / side),\n}: PolyShape,        container?: SVGElement) {\n  return poly({...arguments[0], innerRadius}, container);\n}\nexport function poly(options: PolyShape, container: SVGElement = makeSVGDOM()) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n\n  be(path, options, container);\n  container.appendChild(path);\n  return container;\n}\nexport function oval({\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  className,\n  r = 0,\n  rx = r,\n  ry = r,\n  width = rx * 2,\n  height = ry * 2,\n  origin,\n  ...attributes\n}: OvalShape,\n                     container: SVGElement = makeSVGDOM(),\n) {\n  const ellipse: SVGEllipseElement = makeDOM(\"ellipse\") as SVGEllipseElement;\n  const halfStroke = strokeWidth / 2;\n\n  setViewBox(container, {\n    strokeWidth,\n    left,\n    top,\n    bottom,\n    right,\n    className,\n    width,\n    height,\n  });\n  setOrigin(ellipse, {\n    left: left + halfStroke,\n    top: top + halfStroke,\n    width,\n    height,\n    origin,\n  });\n\n  setAttributes(ellipse, {\n    fill,\n    \"cx\": left + halfStroke + width / 2,\n    \"cy\": top  + halfStroke + height / 2,\n    \"rx\": width / 2 - halfStroke,\n    \"ry\": height / 2 - halfStroke,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n  container.appendChild(ellipse);\n\n  return container;\n}\nexport function rect({\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  round = 0,\n  width,\n  height,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  className,\n  ...attributes\n}: RoundRectShape,\n                     container: SVGElement = makeSVGDOM(),\n) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n  setViewBox(container, {\n    left,\n    top,\n    bottom,\n    right,\n    className,\n    width,\n    height,\n    strokeWidth,\n  });\n  setOrigin(path, {\n    left,\n    top,\n    width,\n    height,\n    origin,\n  });\n  const halfStroke = strokeWidth / 2;\n  const pathWidth = width - round * 2;\n  const pathHeight = height - round * 2;\n  // tslint:disable-next-line:max-line-length\n  const d = `M${left + round + halfStroke},${top + halfStroke} h${pathWidth} a${round},${round} 0 0 1 ${round},${round} v${pathHeight} a${round},${round} 0 0 1 -${round},${round} h-${pathWidth} a${round},${round} 0 0 1 -${round},-${round} v-${pathHeight} a${round},${round} 0 0 1 ${round},-${round} z`;\n\n  css ? setStyles(path, {d : `path('${d}')`}) : setAttributes(path, {d});\n\n  setAttributes(path, {\n    fill,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n  container.appendChild(path);\n\n  return container;\n}\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["CLASS_NAME","makeDOM","tag","document","createElementNS","makeSVGDOM","el","addClass","setAttributes","element","attributes","name","setAttribute","setStyles","styles","cssText","push","style","join","getAbsoluteValue","value","pos","size","info","splitUnit","unit","setOrigin","container","_a","width","height","left","top","origin","_b","ox","_c","oy","transformOrigin","setViewBox","right","bottom","strokeWidth","className","hasClass","split","forEach","boxWidth","_d","boxHeight","Math","max","getRect","side","_e","rotate","_f","innerRadius","_g","_h","_j","_k","strokeLinejoin","_l","xPoints","yPoints","sideCos","cos","PI","startRad","i","rad","sin","minX","min","minY","maxX","maxY","isWidth","scale","isOuter","sideSin","innerCos","innerScale","diagonal","atan","outerScale","map","xp","yp","pathWidth","pathHeight","length","points","x1","y1","x2","y2","j","x","y","getPath","point","be","path","fill","css","d","star","poly","arguments","options","appendChild","oval","r","rx","ry","_m","_o","ellipse","halfStroke","rect","round","VERSION"],"mappings":"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"}