{"version":3,"file":"shapesvg.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport type STROKE_LINEJOIN = \"bevel\" | \"round\" | \"miter\" | \"miter-clip\" | \"arcs\";\nexport const CLASS_NAME = \"__shape-svg\";\n","import { CLASS_NAME, STROKE_LINEJOIN } from \"./consts\";\n\ninterface SVGInterface {\n  left?: number;\n  top?: number;\n  right?: number;\n  bottom?: number;\n  side?: number;\n  split?: number;\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  strokeLinejoin?: STROKE_LINEJOIN;\n  innerRadius?: number;\n  css?: boolean;\n  [key: string]: any;\n}\n\nfunction makeDOM(tag: string) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction makeSVGDOM() {\n  const el = makeDOM(\"svg\");\n\n  el.setAttribute(\"class\", CLASS_NAME);\n  return el;\n}\nfunction setAttributes(element: SVGElement, attributes: {[key: string]: any}) {\n  for (const name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n}\nfunction setStyles(element: SVGElement, styles: {[key: string]: any}) {\n  const cssText = [];\n\n  for (const name in styles) {\n    cssText.push(`${name}:${styles[name]};`);\n  }\n  element.style.cssText += cssText.join(\"\");\n}\nexport function getRect({\n  left = 0,\n  top = 0,\n  side = 3,\n  rotate = 0,\n  innerRadius = 100,\n  height = 0,\n  split = 1,\n  width = height ? 0 : 100,\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n}: SVGInterface) {\n  let xPoints: number[] = [];\n  let yPoints: number[] = [];\n  const sideCos = Math.cos(Math.PI / side);\n  const startRad = Math.PI / 180 * rotate +  Math.PI * ((side % 2 ? 0 : 1 / side) - 1 / 2);\n\n  for (let i = 0; i < side; ++i) {\n    const rad = Math.PI * (1 / side * 2 * i) + startRad;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    xPoints.push(cos);\n    yPoints.push(sin);\n    if (innerRadius !== 100) {\n      if (sideCos <= innerRadius / 100) {\n        continue;\n      } else {\n        xPoints.push(innerRadius / 100 * Math.cos(rad + Math.PI / side));\n        yPoints.push(innerRadius / 100 * Math.sin(rad + Math.PI / side));\n      }\n    }\n  }\n  const minX = Math.min(...xPoints);\n  const minY = Math.min(...yPoints);\n  const maxX = Math.max(...xPoints);\n  const maxY = Math.max(...yPoints);\n  const isWidth = !!width;\n  const scale = isWidth ? width / (maxX - minX) : height / (maxY - minY);\n  const isOuter = strokeLinejoin === \"miter\" || strokeLinejoin === \"arcs\" || strokeLinejoin === \"miter-clip\";\n\n  const sideSin = Math.sin(Math.PI / side);\n  const innerCos = Math.min(sideCos, innerRadius / 100);\n  const innerScale = scale * innerCos;\n  const diagonal = strokeWidth / 2 / (sideCos === innerCos ? 1 : Math.sin(Math.atan(sideSin / (sideCos - innerCos))));\n  const outerScale = isOuter ? (innerScale + diagonal) / innerScale : 1;\n  const pos = isOuter ? 0 : strokeWidth / 2;\n\n  xPoints = xPoints.map(xp => (xp - minX * outerScale) * scale + pos);\n  yPoints = yPoints.map(yp => (yp - minY * outerScale) * scale + pos);\n\n  const pathWidth = (maxX - minX) * outerScale * scale + pos * 2;\n  const pathHeight = (maxY - minY) * outerScale * scale + pos * 2;\n  const length = xPoints.length;\n  const points = [];\n\n  points.push([left + xPoints[0], top + yPoints[0]]);\n  for (let i = 1; i <= length; ++i) {\n    const x1 = xPoints[i - 1];\n    const y1 = yPoints[i - 1];\n    const x2 = xPoints[i === length ? 0 : i];\n    const y2 = yPoints[i === length ? 0 : i];\n\n    for (let j = 1; j <= split; ++j) {\n      const x = (x1 * (split - j) + x2 * j) / split;\n      const y = (y1 * (split - j) + y2 * j) / split;\n\n      points.push([left + x, top + y]);\n    }\n  }\n\n  return {points, width: pathWidth, height: pathHeight};\n}\nexport function getPath(points: number[][]) {\n  return points.map((point, i) => {\n      return `${i === 0 ? \"M\" : \"L\"} ${point.join(\" \")}`;\n  }).join(\" \") + \" Z\";\n}\nexport function be(path: SVGPathElement, {\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  side,\n  split,\n  rotate,\n  innerRadius,\n  height,\n  width,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  ...attributes\n}: SVGInterface,   container?: SVGElement) {\n  const {points, width: pathWidth, height: pathHeight } =\n    getRect({left, top, split, side, rotate, width, height, innerRadius, strokeLinejoin, strokeWidth});\n\n  if (container && container.getAttribute(\"class\") === CLASS_NAME) {\n    container.setAttribute(\"viewBox\", `0 0 ${left + pathWidth + right} ${top + pathHeight + bottom}`);\n  }\n  const d = getPath(points);\n\n  css ? setStyles(path, {d : `path('${d}')`}) : setAttributes(path, {d});\n\n  setAttributes(path, {\n    fill,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n}\nexport function star({\n  side = 3,\n  innerRadius = 60 * Math.cos(Math.PI / side),\n}: SVGInterface,     container?: SVGAElement) {\n  return poly({...arguments[0], innerRadius}, container);\n}\nexport function poly(options: SVGInterface, container: SVGElement = makeSVGDOM()) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n\n  be(path, options, container);\n  container.appendChild(path);\n  return container;\n}\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["CLASS_NAME","makeDOM","tag","document","createElementNS","makeSVGDOM","el","setAttribute","setAttributes","element","attributes","name","setStyles","styles","cssText","push","style","join","getRect","_a","_b","left","_c","top","_d","side","_e","rotate","_f","innerRadius","_g","height","_h","split","_j","width","_k","strokeLinejoin","_l","strokeWidth","xPoints","yPoints","sideCos","Math","cos","PI","startRad","i","rad","sin","minX","min","minY","maxX","max","maxY","isWidth","scale","isOuter","sideSin","innerCos","innerScale","diagonal","atan","outerScale","pos","map","xp","yp","pathWidth","pathHeight","length","points","x1","y1","x2","y2","j","x","y","getPath","point","be","path","container","right","bottom","fill","css","getAttribute","d","star","poly","arguments","options","appendChild","VERSION"],"mappings":"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"}