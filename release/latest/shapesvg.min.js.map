{"version":3,"file":"shapesvg.min.js","sources":["../src/consts.ts","../node_modules/@daybrush/utils/dist/utils.esm.js","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport type STROKE_LINEJOIN = \"bevel\" | \"round\" | \"miter\" | \"miter-clip\" | \"arcs\";\nexport const CLASS_NAME = \"__shape-svg\";\n","/*\nCopyright (c) 2018 Daybrush\n@name: @daybrush/utils\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/utils\n@version 0.5.2\n*/\n/**\n* @namespace\n* @name Consts\n*/\n\n/**\n* get string \"rgb\"\n* @memberof Color\n* @example\nimport {RGB} from \"@daybrush/utils\";\n\nconsole.log(RGB); // \"rgb\"\n*/\nvar RGB = \"rgb\";\n/**\n* get string \"rgba\"\n* @memberof Color\n* @example\nimport {RGBA} from \"@daybrush/utils\";\n\nconsole.log(RGBA); // \"rgba\"\n*/\n\nvar RGBA = \"rgba\";\n/**\n* get string \"hsl\"\n* @memberof Color\n* @example\nimport {HSL} from \"@daybrush/utils\";\n\nconsole.log(HSL); // \"hsl\"\n*/\n\nvar HSL = \"hsl\";\n/**\n* get string \"hsla\"\n* @memberof Color\n* @example\nimport {HSLA} from \"@daybrush/utils\";\n\nconsole.log(HSLA); // \"hsla\"\n*/\n\nvar HSLA = \"hsla\";\n/**\n* gets an array of color models.\n* @memberof Color\n* @example\nimport {COLOR_MODELS} from \"@daybrush/utils\";\n\nconsole.log(COLOR_MODELS); // [\"rgb\", \"rgba\", \"hsl\", \"hsla\"];\n*/\n\nvar COLOR_MODELS = [RGB, RGBA, HSL, HSLA];\n/**\n* get string \"function\"\n* @memberof Consts\n* @example\nimport {FUNCTION} from \"@daybrush/utils\";\n\nconsole.log(FUNCTION); // \"function\"\n*/\n\nvar FUNCTION = \"function\";\n/**\n* get string \"property\"\n* @memberof Consts\n* @example\nimport {PROPERTY} from \"@daybrush/utils\";\n\nconsole.log(PROPERTY); // \"property\"\n*/\n\nvar PROPERTY = \"property\";\n/**\n* get string \"array\"\n* @memberof Consts\n* @example\nimport {ARRAY} from \"@daybrush/utils\";\n\nconsole.log(ARRAY); // \"array\"\n*/\n\nvar ARRAY = \"array\";\n/**\n* get string \"object\"\n* @memberof Consts\n* @example\nimport {OBJECT} from \"@daybrush/utils\";\n\nconsole.log(OBJECT); // \"object\"\n*/\n\nvar OBJECT = \"object\";\n/**\n* get string \"string\"\n* @memberof Consts\n* @example\nimport {STRING} from \"@daybrush/utils\";\n\nconsole.log(STRING); // \"string\"\n*/\n\nvar STRING = \"string\";\n/**\n* get string \"number\"\n* @memberof Consts\n* @example\nimport {NUMBER} from \"@daybrush/utils\";\n\nconsole.log(NUMBER); // \"number\"\n*/\n\nvar NUMBER = \"number\";\n/**\n* get string \"undefined\"\n* @memberof Consts\n* @example\nimport {UNDEFINED} from \"@daybrush/utils\";\n\nconsole.log(UNDEFINED); // \"undefined\"\n*/\n\nvar UNDEFINED = \"undefined\";\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar IS_WINDOW = typeof window !== UNDEFINED;\n/**\n* Check whether the environment is window or node.js.\n* @memberof Consts\n* @name document\n* @example\nimport {IS_WINDOW} from \"@daybrush/utils\";\n\nconsole.log(IS_WINDOW); // false in node.js\nconsole.log(IS_WINDOW); // true in browser\n*/\n\nvar doc = typeof document !== UNDEFINED && document;\nvar prefixes = [\"webkit\", \"ms\", \"moz\", \"o\"];\n/**\n * @namespace CrossBrowser\n */\n\n/**\n* Get a CSS property with a vendor prefix that supports cross browser.\n* @function\n* @param {string} property - A CSS property\n* @return {string} CSS property with cross-browser vendor prefix\n* @memberof CrossBrowser\n* @example\nimport {getCrossBrowserProperty} from \"@daybrush/utils\";\n\nconsole.log(getCrossBrowserProperty(\"transform\")); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\nconsole.log(getCrossBrowserProperty(\"filter\")); // \"filter\", \"-webkit-filter\"\n*/\n\nvar getCrossBrowserProperty =\n/*#__PURE__*/\nfunction (property) {\n  if (!doc) {\n    return \"\";\n  }\n\n  var styles = (doc.body || doc.documentElement).style;\n  var length = prefixes.length;\n\n  if (typeof styles[property] !== UNDEFINED) {\n    return property;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var name = \"-\" + prefixes[i] + \"-\" + property;\n\n    if (typeof styles[name] !== UNDEFINED) {\n      return name;\n    }\n  }\n\n  return \"\";\n};\n/**\n* get string \"transfrom\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {TRANSFORM} from \"@daybrush/utils\";\n\nconsole.log(TRANSFORM); // \"transform\", \"-ms-transform\", \"-webkit-transform\"\n*/\n\nvar TRANSFORM =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"transform\");\n/**\n* get string \"filter\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {FILTER} from \"@daybrush/utils\";\n\nconsole.log(FILTER); // \"filter\", \"-ms-filter\", \"-webkit-filter\"\n*/\n\nvar FILTER =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"filter\");\n/**\n* get string \"animation\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {ANIMATION} from \"@daybrush/utils\";\n\nconsole.log(ANIMATION); // \"animation\", \"-ms-animation\", \"-webkit-animation\"\n*/\n\nvar ANIMATION =\n/*#__PURE__*/\ngetCrossBrowserProperty(\"animation\");\n/**\n* get string \"keyframes\" with the vendor prefix.\n* @memberof CrossBrowser\n* @example\nimport {KEYFRAMES} from \"@daybrush/utils\";\n\nconsole.log(KEYFRAMES); // \"keyframes\", \"-ms-keyframes\", \"-webkit-keyframes\"\n*/\n\nvar KEYFRAMES =\n/*#__PURE__*/\nANIMATION.replace(\"animation\", \"keyframes\");\n\n/**\n* @namespace\n* @name Utils\n*/\n\n/**\n* Check the type that the value is undefined.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {boolean} true if the type is correct, false otherwise\n* @example\nimport {isUndefined} from \"@daybrush/utils\";\n\nconsole.log(isUndefined(undefined)); // true\nconsole.log(isUndefined(\"\")); // false\nconsole.log(isUndefined(1)); // false\nconsole.log(isUndefined(null)); // false\n*/\n\nfunction isUndefined(value) {\n  return typeof value === UNDEFINED;\n}\n/**\n* Check the type that the value is object.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isObject} from \"@daybrush/utils\";\n\nconsole.log(isObject({})); // true\nconsole.log(isObject(undefined)); // false\nconsole.log(isObject(\"\")); // false\nconsole.log(isObject(null)); // false\n*/\n\nfunction isObject(value) {\n  return value && typeof value === OBJECT;\n}\n/**\n* Check the type that the value is isArray.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isArray} from \"@daybrush/utils\";\n\nconsole.log(isArray([])); // true\nconsole.log(isArray({})); // false\nconsole.log(isArray(undefined)); // false\nconsole.log(isArray(null)); // false\n*/\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n/**\n* Check the type that the value is string.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isString} from \"@daybrush/utils\";\n\nconsole.log(isString(\"1234\")); // true\nconsole.log(isString(undefined)); // false\nconsole.log(isString(1)); // false\nconsole.log(isString(null)); // false\n*/\n\nfunction isString(value) {\n  return typeof value === STRING;\n}\n/**\n* Check the type that the value is function.\n* @memberof Utils\n* @param {string} value - Value to check the type\n* @return {} true if the type is correct, false otherwise\n* @example\nimport {isFunction} from \"@daybrush/utils\";\n\nconsole.log(isFunction(function a() {})); // true\nconsole.log(isFunction(() => {})); // true\nconsole.log(isFunction(\"1234\")); // false\nconsole.log(isFunction(1)); // false\nconsole.log(isFunction(null)); // false\n*/\n\nfunction isFunction(value) {\n  return typeof value === FUNCTION;\n}\n/**\n* divide text by space.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {spliceSpace} from \"@daybrush/utils\";\n\nconsole.log(splitSpace(\"a b c d e f g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitSpace(\"'a,b' c 'd,e' f g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitSpace(text) {\n  // divide comma(,)\n  var matches = text.match(/(\"[^\"]*\")|('[^']*')|([^\\s()]*(?:\\((?:[^()]*|\\([^()]*\\))*\\))[^\\s()]*)|\\S+/g);\n  return matches || [];\n}\n/**\n* divide text by comma.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {Array} divided texts\n* @example\nimport {splitComma} from \"@daybrush/utils\";\n\nconsole.log(splitComma(\"a,b,c,d,e,f,g\"));\n// [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nconsole.log(splitComma(\"'a,b',c,'d,e',f,g\"));\n// [\"'a,b'\", \"c\", \"'d,e'\", \"f\", \"g\"]\n*/\n\nfunction splitComma(text) {\n  // divide comma(,)\n  // \"[^\"]*\"|'[^']*'\n  var matches = text.match(/(\"[^\"]*\"|'[^']*'|[^,\\s()]*\\((?:[^()]*|\\([^()]*\\))*\\)[^,\\s()]*|[^,])+/g);\n  return matches ? matches.map(function (str) {\n    return str.trim();\n  }) : [];\n}\n/**\n* divide text by bracket \"(\", \")\".\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {object} divided texts\n* @example\nimport {splitBracket} from \"@daybrush/utils\";\n\nconsole.log(splitBracket(\"a(1, 2)\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"\"}\nconsole.log(splitBracket(\"a(1, 2)b\"));\n// {prefix: \"a\", value: \"1, 2\", suffix: \"b\"}\n*/\n\nfunction splitBracket(text) {\n  var matches = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(text);\n\n  if (!matches || matches.length < 4) {\n    return {};\n  } else {\n    return {\n      prefix: matches[1],\n      value: matches[2],\n      suffix: matches[3]\n    };\n  }\n}\n/**\n* divide text by number and unit.\n* @memberof Utils\n* @param {string} text - text to divide\n* @return {} divided texts\n* @example\nimport {splitUnit} from \"@daybrush/utils\";\n\nconsole.log(splitUnit(\"10px\"));\n// {prefix: \"\", value: 10, unit: \"px\"}\nconsole.log(splitUnit(\"-10px\"));\n// {prefix: \"\", value: -10, unit: \"px\"}\nconsole.log(splitUnit(\"a10%\"));\n// {prefix: \"a\", value: 10, unit: \"%\"}\n*/\n\nfunction splitUnit(text) {\n  var matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  }\n\n  var prefix = matches[1];\n  var value = matches[2];\n  var unit = matches[3];\n  return {\n    prefix: prefix,\n    unit: unit,\n    value: parseFloat(value)\n  };\n}\n/**\n* transform strings to camel-case\n* @memberof Utils\n* @param {String} text - string\n* @return {String} camel-case string\n* @example\nimport {camelize} from \"@daybrush/utils\";\n\nconsole.log(camelize(\"transform-origin\")); // transformOrigin\nconsole.log(camelize(\"abcd_efg\")); // abcdEfg\nconsole.log(camelize(\"abcd efg\")); // abcdEfg\n*/\n\nfunction camelize(str) {\n  return str.replace(/[\\s-_]([a-z])/g, function (all, letter) {\n    return letter.toUpperCase();\n  });\n}\n/**\n* transform a camelized string into a lowercased string.\n* @memberof Utils\n* @param {string} text - a camel-cased string\n* @param {string} [separator=\"-\"] - a separator\n* @return {string}  a lowercased string\n* @example\nimport {decamelize} from \"@daybrush/utils\";\n\nconsole.log(decamelize(\"transformOrigin\")); // transform-origin\nconsole.log(decamelize(\"abcdEfg\", \"_\")); // abcd_efg\n*/\n\nfunction decamelize(str, separator) {\n  if (separator === void 0) {\n    separator = \"-\";\n  }\n\n  return str.replace(/([a-z])([A-Z])/g, function (all, letter, letter2) {\n    return \"\" + letter + separator + letter2.toLowerCase();\n  });\n}\n/**\n* Date.now() method\n* @memberof CrossBrowser\n* @return {number} milliseconds\n* @example\nimport {now} from \"@daybrush/utils\";\n\nconsole.log(now()); // 12121324241(milliseconds)\n*/\n\nfunction now() {\n  return Date.now ? Date.now() : new Date().getTime();\n}\n/**\n* window.requestAnimationFrame() method with cross browser.\n* @function\n* @memberof CrossBrowser\n* @param {FrameRequestCallback} callback - The function to call when it's time to update your animation for the next repaint.\n* @return {number} id\n* @example\nimport {requestAnimationFrame} from \"@daybrush/utils\";\n\nrequestAnimationFrame((timestamp) => {\n  console.log(timestamp);\n});\n*/\n\nvar requestAnimationFrame =\n/*#__PURE__*/\nfunction () {\n  var firstTime = now();\n  var raf = IS_WINDOW && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame);\n  return raf ? raf.bind(window) : function (callback) {\n    var currTime = now();\n    var id = window.setTimeout(function () {\n      callback(currTime - firstTime);\n    }, 1000 / 60);\n    return id;\n  };\n}();\n\n/**\n* @namespace\n* @name Color\n*/\n\n/**\n* Remove the # from the hex color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} hex color\n* @example\nimport {cutHex} from \"@daybrush/utils\";\n\nconsole.log(cutHex(\"#000000\")) // \"000000\"\n*/\n\nfunction cutHex(hex) {\n  return hex.replace(\"#\", \"\");\n}\n/**\n* convert hex color to rgb color.\n* @memberof Color\n* @param {} hex - hex color\n* @return {} rgb color\n* @example\nimport {hexToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hexToRGBA(\"#00000005\"));\n// [0, 0, 0, 1]\nconsole.log(hexToRGBA(\"#201045\"));\n// [32, 16, 69, 1]\n*/\n\nfunction hexToRGBA(hex) {\n  var h = cutHex(hex);\n  var r = parseInt(h.substring(0, 2), 16);\n  var g = parseInt(h.substring(2, 4), 16);\n  var b = parseInt(h.substring(4, 6), 16);\n  var a = parseInt(h.substring(6, 8), 16) / 255;\n\n  if (isNaN(a)) {\n    a = 1;\n  }\n\n  return [r, g, b, a];\n}\n/**\n* convert 3(or 4)-digit hex color to 6(or 8)-digit hex color.\n* @memberof Color\n* @param {} hex - 3(or 4)-digit hex color\n* @return {} 6(or 8)-digit hex color\n* @example\nimport {toFullHex} from \"@daybrush/utils\";\n\nconsole.log(toFullHex(\"#123\")); // \"#112233\"\nconsole.log(toFullHex(\"#123a\")); // \"#112233aa\"\n*/\n\nfunction toFullHex(h) {\n  var r = h.charAt(1);\n  var g = h.charAt(2);\n  var b = h.charAt(3);\n  var a = h.charAt(4);\n  var arr = [\"#\", r, r, g, g, b, b, a, a];\n  return arr.join(\"\");\n}\n/**\n* convert hsl color to rgba color.\n* @memberof Color\n* @param {} hsl - hsl color(hue: 0 ~ 360, saturation: 0 ~ 1, lightness: 0 ~ 1, alpha: 0 ~ 1)\n* @return {} rgba color\n* @example\nimport {hslToRGBA} from \"@daybrush/utils\";\n\nconsole.log(hslToRGBA([150, 0.5, 0.4]));\n// [51, 153, 102, 1]\n*/\n\nfunction hslToRGBA(hsl) {\n  var h = hsl[0];\n  var s = hsl[1];\n  var l = hsl[2];\n\n  if (h < 0) {\n    h += Math.floor((Math.abs(h) + 360) / 360) * 360;\n  }\n\n  h %= 360;\n  var c = (1 - Math.abs(2 * l - 1)) * s;\n  var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n  var m = l - c / 2;\n  var rgb;\n\n  if (h < 60) {\n    rgb = [c, x, 0];\n  } else if (h < 120) {\n    rgb = [x, c, 0];\n  } else if (h < 180) {\n    rgb = [0, c, x];\n  } else if (h < 240) {\n    rgb = [0, x, c];\n  } else if (h < 300) {\n    rgb = [x, 0, c];\n  } else if (h < 360) {\n    rgb = [c, 0, x];\n  }\n\n  var result = [Math.round((rgb[0] + m) * 255), Math.round((rgb[1] + m) * 255), Math.round((rgb[2] + m) * 255), hsl.length > 3 ? hsl[3] : 1];\n  return result;\n}\n/**\n* convert string to rgba color.\n* @memberof Color\n* @param {} - 3-hex(#000), 4-hex(#0000) 6-hex(#000000), 8-hex(#00000000) or RGB(A), or HSL(A)\n* @return {} rgba color\n* @example\nimport {stringToRGBA} from \"@daybrush/utils\";\n\nconsole.log(stringToRGBA(\"#000000\")); // [0, 0, 0, 1]\nconsole.log(stringToRGBA(\"rgb(100, 100, 100)\")); // [100, 100, 100, 1]\nconsole.log(stringToRGBA(\"hsl(150, 0.5, 0.4)\")); // [51, 153, 102, 1]\n*/\n\nfunction stringToRGBA(color) {\n  if (color.charAt(0) === \"#\") {\n    if (color.length === 4 || color.length === 5) {\n      return hexToRGBA(toFullHex(color));\n    } else {\n      return hexToRGBA(color);\n    }\n  } else if (color.indexOf(\"(\") !== -1) {\n    // in bracket.\n    var _a = splitBracket(color),\n        prefix = _a.prefix,\n        value = _a.value;\n\n    if (!prefix || !value) {\n      return;\n    }\n\n    var arr = splitComma(value);\n    var colorArr = [];\n    var length = arr.length;\n\n    switch (prefix) {\n      case RGB:\n      case RGBA:\n        for (var i = 0; i < length; ++i) {\n          colorArr[i] = parseFloat(arr[i]);\n        }\n\n        return colorArr;\n\n      case HSL:\n      case HSLA:\n        for (var i = 0; i < length; ++i) {\n          if (arr[i].indexOf(\"%\") !== -1) {\n            colorArr[i] = parseFloat(arr[i]) / 100;\n          } else {\n            colorArr[i] = parseFloat(arr[i]);\n          }\n        } // hsl, hsla to rgba\n\n\n        return hslToRGBA(colorArr);\n    }\n  }\n\n  return;\n}\n\n/**\n * Returns all element descendants of node that\n * match selectors.\n */\n\n/**\n * Checks if the specified class value exists in the element's class attribute.\n * @memberof DOM\n * @param - A DOMString containing one or more selectors to match\n * @param - If multi is true, a DOMString containing one or more selectors to match against.\n * @example\nimport {$} from \"@daybrush/utils\";\n\nconsole.log($(\"div\")); // div element\nconsole.log($(\"div\", true)); // [div, div] elements\n*/\n\nfunction $(selectors, multi) {\n  return multi ? doc.querySelectorAll(selectors) : doc.querySelector(selectors);\n}\n/**\n* Checks if the specified class value exists in the element's class attribute.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to search\n* @return {boolean} return false if the class is not found.\n* @example\nimport {hasClass} from \"@daybrush/utils\";\n\nconsole.log(hasClass(element, \"start\")); // true or false\n*/\n\nfunction hasClass(element, className) {\n  if (element.classList) {\n    return element.classList.contains(className);\n  }\n\n  return !!element.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n}\n/**\n* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to add\n* @example\nimport {addClass} from \"@daybrush/utils\";\n\naddClass(element, \"start\");\n*/\n\nfunction addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += \" \" + className;\n  }\n}\n/**\n* Removes the specified class value.\n* @memberof DOM\n* @param element - target\n* @param className - the class name to remove\n* @example\nimport {removeClass} from \"@daybrush/utils\";\n\nremoveClass(element, \"start\");\n*/\n\nfunction removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n    element.className = element.className.replace(reg, \" \");\n  }\n}\n/**\n* Gets the CSS properties from the element.\n* @memberof DOM\n* @param elements - elements\n* @param properites - the CSS properties\n* @return returns CSS properties and values.\n* @example\nimport {fromCSS} from \"@daybrush/utils\";\n\nconsole.log(fromCSS(element, [\"left\", \"opacity\", \"top\"])); // {\"left\": \"10px\", \"opacity\": 1, \"top\": \"10px\"}\n*/\n\nfunction fromCSS(elements, properties) {\n  if (!elements || !properties || !properties.length) {\n    return {};\n  }\n\n  var element;\n\n  if (elements instanceof Element) {\n    element = elements;\n  } else if (elements.length) {\n    element = elements[0];\n  } else {\n    return {};\n  }\n\n  var cssObject = {};\n  var styles = window.getComputedStyle(element);\n  var length = properties.length;\n\n  for (var i = 0; i < length; ++i) {\n    cssObject[properties[i]] = styles[properties[i]];\n  }\n\n  return cssObject;\n}\n\nexport { RGB, RGBA, HSL, HSLA, COLOR_MODELS, FUNCTION, PROPERTY, ARRAY, OBJECT, STRING, NUMBER, UNDEFINED, IS_WINDOW, doc as document, getCrossBrowserProperty, TRANSFORM, FILTER, ANIMATION, KEYFRAMES, cutHex, hexToRGBA, toFullHex, hslToRGBA, stringToRGBA, isUndefined, isObject, isArray, isString, isFunction, splitSpace, splitComma, splitBracket, splitUnit, camelize, decamelize, now, requestAnimationFrame, $, hasClass, addClass, removeClass, fromCSS };\n//# sourceMappingURL=utils.esm.js.map\n","import { CLASS_NAME, STROKE_LINEJOIN } from \"./consts\";\nimport {hasClass, addClass, splitUnit} from \"@daybrush/utils\";\n\nexport interface Shape {\n    left?: number;\n    top?: number;\n    right?: number;\n    bottom?: number;\n    width?: number;\n    height?: number;\n    fill?: string;\n    strokeLinejoin?: STROKE_LINEJOIN;\n    strokeWidth?: number;\n    className?: string;\n    origin?: string | number;\n    [key: string]: any;\n}\nexport interface RoundRectShape extends Shape {\n  round?: number;\n  css?: boolean;\n}\nexport interface PolyShape extends Shape {\n  side?: number;\n  split?: number;\n  css?: boolean;\n  innerRadius?: number;\n}\nexport interface OvalShape extends Shape {\n  r?: number;\n  rx?: number;\n  ry?: number;\n}\nfunction makeDOM(tag: string) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction makeSVGDOM() {\n  const el = makeDOM(\"svg\");\n\n  addClass(el, CLASS_NAME);\n  return el;\n}\nfunction setAttributes(element: SVGElement, attributes: {[key: string]: any}) {\n  for (const name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n}\nfunction setStyles(element: SVGElement, styles: {[key: string]: any}) {\n  const cssText = [];\n\n  for (const name in styles) {\n    cssText.push(`${name}:${styles[name]};`);\n  }\n  element.style.cssText += cssText.join(\"\");\n}\nfunction getAbsoluteValue(value: string, pos: number, size: number) {\n  const info = splitUnit(value);\n\n  if (info.unit === \"%\") {\n    return (pos + size * info.value / 100) + \"px\";\n  } else if (info.unit === \"px\") {\n    return (pos + info.value) + \"px\";\n  } else {\n    return `calc(${pos}px + ${value})`;\n  }\n}\nfunction setOrigin(container: SVGElement, {\n  width,\n  height,\n  left,\n  top,\n  origin,\n}: {\n  width: number,\n  height: number,\n  left: number,\n  top: number,\n  origin: string | number,\n}) {\n  if (!origin) {\n    return;\n  }\n  let [ox, oy = ox]: string[] = `${origin}`.split(\" \");\n\n  ox = getAbsoluteValue(ox, left, width);\n  oy = getAbsoluteValue(oy, top, height);\n\n  container.style.transformOrigin = `${ox} ${oy}`;\n}\nfunction setViewBox(container: SVGElement, {\n  width,\n  height,\n  left,\n  right,\n  bottom,\n  top,\n  strokeWidth,\n  className,\n}: {\n  width: number,\n  height: number,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  strokeWidth: number,\n  className?: string,\n}) {\n  if (container && hasClass(container, CLASS_NAME)) {\n    className && className.split(\" \").forEach(name => {\n      addClass(container, name);\n    });\n    const [, , boxWidth = 0, boxHeight = 0] = (container.getAttribute(\"viewBox\") || \"\").split(\" \")\n      .map(pos => parseFloat(pos || \"0\"));\n\n    container.setAttribute(\"viewBox\", \"0 0 \" +\n    // tslint:disable-next-line:max-line-length\n    `${Math.max(left + width + right + strokeWidth, boxWidth)} ${Math.max(top + height + bottom + strokeWidth, boxHeight)}`);\n  }\n}\n\nexport function getRect({\n  left = 0,\n  top = 0,\n  side = 3,\n  rotate = 0,\n  innerRadius = 100,\n  height = 0,\n  split = 1,\n  width = height ? 0 : 100,\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n}: PolyShape) {\n  let xPoints: number[] = [];\n  let yPoints: number[] = [];\n  const sideCos = Math.cos(Math.PI / side);\n  const startRad = Math.PI / 180 * rotate +  Math.PI * ((side % 2 ? 0 : 1 / side) - 1 / 2);\n\n  for (let i = 0; i < side; ++i) {\n    const rad = Math.PI * (1 / side * 2 * i) + startRad;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    xPoints.push(cos);\n    yPoints.push(sin);\n    if (innerRadius !== 100) {\n      if (sideCos <= innerRadius / 100) {\n        continue;\n      } else {\n        xPoints.push(innerRadius / 100 * Math.cos(rad + Math.PI / side));\n        yPoints.push(innerRadius / 100 * Math.sin(rad + Math.PI / side));\n      }\n    }\n  }\n  const minX = Math.min(...xPoints);\n  const minY = Math.min(...yPoints);\n  const maxX = Math.max(...xPoints);\n  const maxY = Math.max(...yPoints);\n  const isWidth = !!width;\n  const scale = isWidth ? width / (maxX - minX) : height / (maxY - minY);\n  const isOuter = strokeLinejoin === \"miter\" || strokeLinejoin === \"arcs\" || strokeLinejoin === \"miter-clip\";\n\n  const sideSin = Math.sin(Math.PI / side);\n  const innerCos = Math.min(sideCos, innerRadius / 100);\n  const innerScale = scale * innerCos;\n  const diagonal = strokeWidth / 2 / (sideCos === innerCos ? 1 : Math.sin(Math.atan(sideSin / (sideCos - innerCos))));\n  const outerScale = isOuter ? (innerScale + diagonal) / innerScale : 1;\n  const pos = isOuter ? 0 : strokeWidth / 2;\n\n  xPoints = xPoints.map(xp => (xp - minX * outerScale) * scale + pos);\n  yPoints = yPoints.map(yp => (yp - minY * outerScale) * scale + pos);\n\n  const pathWidth = (maxX - minX) * outerScale * scale + pos * 2;\n  const pathHeight = (maxY - minY) * outerScale * scale + pos * 2;\n  const length = xPoints.length;\n  const points = [];\n\n  points.push([left + xPoints[0], top + yPoints[0]]);\n  for (let i = 1; i <= length; ++i) {\n    const x1 = xPoints[i - 1];\n    const y1 = yPoints[i - 1];\n    const x2 = xPoints[i === length ? 0 : i];\n    const y2 = yPoints[i === length ? 0 : i];\n\n    for (let j = 1; j <= split; ++j) {\n      const x = (x1 * (split - j) + x2 * j) / split;\n      const y = (y1 * (split - j) + y2 * j) / split;\n\n      points.push([left + x, top + y]);\n    }\n  }\n\n  return {points, width: pathWidth, height: pathHeight};\n}\nexport function getPath(points: number[][]) {\n  return points.map((point, i) => {\n      return `${i === 0 ? \"M\" : \"L\"} ${point.join(\" \")}`;\n  }).join(\" \") + \" Z\";\n}\nexport function be(path: SVGPathElement, {\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  side,\n  split,\n  rotate,\n  innerRadius,\n  height,\n  width,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  className,\n  ...attributes\n}: PolyShape,      container?: SVGElement) {\n  const {points, width: pathWidth, height: pathHeight } =\n    getRect({left, top, split, side, rotate, width, height, innerRadius, strokeLinejoin, strokeWidth});\n\n  setViewBox(container, {\n      left,\n      top,\n      bottom,\n      right,\n      className,\n      strokeWidth: 0,\n      width: pathWidth,\n      height: pathHeight,\n    });\n  const d = getPath(points);\n\n  css ? setStyles(path, {d : `path('${d}')`}) : setAttributes(path, {d});\n\n  setAttributes(path, {\n    fill,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n}\nexport function star({\n  side = 3,\n  innerRadius = 60 * Math.cos(Math.PI / side),\n}: PolyShape,        container?: SVGElement) {\n  return poly({...arguments[0], innerRadius}, container);\n}\nexport function poly(options: PolyShape, container: SVGElement = makeSVGDOM()) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n\n  be(path, options, container);\n  container.appendChild(path);\n  return container;\n}\nexport function oval({\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  className,\n  r = 0,\n  rx = r,\n  ry = r,\n  width = rx * 2,\n  height = ry * 2,\n  origin,\n  ...attributes\n}: OvalShape,\n                     container: SVGElement = makeSVGDOM(),\n) {\n  const ellipse: SVGEllipseElement = makeDOM(\"ellipse\") as SVGEllipseElement;\n  const halfStroke = strokeWidth / 2;\n\n  setViewBox(container, {\n    strokeWidth,\n    left,\n    top,\n    bottom,\n    right,\n    className,\n    width,\n    height,\n  });\n  setOrigin(ellipse, {\n    left: left + halfStroke,\n    top: top + halfStroke,\n    width,\n    height,\n    origin,\n  });\n\n  setAttributes(ellipse, {\n    fill,\n    \"cx\": left + halfStroke + width / 2,\n    \"cy\": top  + halfStroke + height / 2,\n    \"rx\": width / 2 - halfStroke,\n    \"ry\": height / 2 - halfStroke,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n  container.appendChild(ellipse);\n\n  return container;\n}\nexport function rect({\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  round = 0,\n  width,\n  height,\n  fill = \"transparent\",\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n  css = false,\n  className,\n  ...attributes\n}: RoundRectShape,\n                     container: SVGElement = makeSVGDOM(),\n) {\n  const path: SVGPathElement = makeDOM(\"path\") as SVGPathElement;\n  setViewBox(container, {\n    left,\n    top,\n    bottom,\n    right,\n    className,\n    width,\n    height,\n    strokeWidth,\n  });\n  setOrigin(path, {\n    left,\n    top,\n    width,\n    height,\n    origin,\n  });\n  const halfStroke = strokeWidth / 2;\n  const pathWidth = width - round * 2;\n  const pathHeight = height - round * 2;\n  // tslint:disable-next-line:max-line-length\n  const d = `M${left + round + halfStroke},${top + halfStroke} h${pathWidth} a${round},${round} 0 0 1 ${round},${round} v${pathHeight} a${round},${round} 0 0 1 -${round},${round} h-${pathWidth} a${round},${round} 0 0 1 -${round},-${round} v-${pathHeight} a${round},${round} 0 0 1 ${round},-${round} z`;\n\n  css ? setStyles(path, {d : `path('${d}')`}) : setAttributes(path, {d});\n\n  setAttributes(path, {\n    fill,\n    \"stroke-linejoin\": strokeLinejoin,\n    \"stroke-width\": `${strokeWidth}`,\n    ...attributes,\n  });\n  container.appendChild(path);\n\n  return container;\n}\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["CLASS_NAME","UNDEFINED","document","addClass","element","className","classList","add","makeDOM","tag","createElementNS","makeSVGDOM","el","setAttributes","attributes","name","setAttribute","setStyles","styles","cssText","push","style","join","getAbsoluteValue","value","pos","size","info","text","matches","exec","prefix","unit","NaN","parseFloat","splitUnit","setOrigin","container","_a","width","height","left","top","origin","_b","ox","_c","oy","transformOrigin","setViewBox","right","bottom","strokeWidth","contains","match","RegExp","split","forEach","boxWidth","_d","boxHeight","Math","max","getRect","side","_e","rotate","_f","innerRadius","_g","_h","_j","_k","strokeLinejoin","_l","xPoints","yPoints","sideCos","cos","PI","startRad","i","rad","sin","minX","min","minY","maxX","maxY","scale","isOuter","sideSin","innerCos","innerScale","diagonal","atan","outerScale","map","xp","yp","pathWidth","pathHeight","length","points","x1","y1","x2","y2","j","x","y","getPath","point","be","path","fill","css","d","poly","options","appendChild","r","rx","ry","_m","_o","ellipse","halfStroke","round"],"mappings":"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"}