{"version":3,"file":"shapesvg.min.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport type STROKE_LINEJOIN = \"bevel\" | \"round\" | \"miter\" | \"miter-clip\" | \"arcs\";\nexport const CLASS_NAME = \"__shape-svg\";\n","import { CLASS_NAME, STROKE_LINEJOIN } from \"./consts\";\n\ninterface SVGInterface {\n  left?: number;\n  top?: number;\n  right?: number;\n  bottom?: number;\n  side?: number;\n  split?: number;\n  width?: number;\n  height?: number;\n  strokeWidth?: number;\n  strokeLinejoin?: STROKE_LINEJOIN;\n  innerRadius?: number;\n  [key: string]: any;\n}\n\nfunction makeDOM(tag: string) {\n  return document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction makeSVGDOM() {\n  const el = makeDOM(\"svg\");\n\n  el.setAttribute(\"class\", CLASS_NAME);\n  return el;\n}\nexport function getRect({\n  side = 3,\n  rotate = 0,\n  innerRadius = 100,\n  width = 0,\n  height = 0,\n  strokeLinejoin = \"round\",\n  strokeWidth = 0,\n}: SVGInterface) {\n  let xPoints: number[] = [];\n  let yPoints: number[] = [];\n\n  const sideCos = Math.cos(Math.PI / side);\n  const startRad = Math.PI / 180 * rotate +  Math.PI * ((side % 2 ? 0 : 1 / side) - 1 / 2);\n\n  for (let i = 0; i < side; ++i) {\n    const rad = Math.PI * (1 / side * 2 * i) + startRad;\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n\n    xPoints.push(cos);\n    yPoints.push(sin);\n    if (innerRadius !== 100) {\n      if (sideCos <= innerRadius / 100) {\n        continue;\n      } else {\n        xPoints.push(innerRadius / 100 * Math.cos(rad + Math.PI / side));\n        yPoints.push(innerRadius / 100 * Math.sin(rad + Math.PI / side));\n      }\n    }\n  }\n  const minX = Math.min(...xPoints);\n  const minY = Math.min(...yPoints);\n  const maxX = Math.max(...xPoints);\n  const maxY = Math.max(...yPoints);\n  const isWidth = !!width;\n  const scale = isWidth ? width / (maxX - minX) : height / (maxY - minY);\n  const isOuter = strokeLinejoin === \"miter\" || strokeLinejoin === \"arcs\" || strokeLinejoin === \"miter-clip\";\n  const outerScale = isOuter ? (scale + strokeWidth / 2) / scale : 1;\n  const pos = isOuter ? 0 : strokeWidth / 2;\n\n  xPoints = xPoints.map(xp => (xp - minX * outerScale) * scale + pos);\n  yPoints = yPoints.map(yp => (yp - minY * outerScale) * scale + pos);\n\n  const polygonWidth = (maxX - minX) * outerScale * scale + pos * 2;\n  const polygonHeight = (maxY - minY) * outerScale * scale + pos * 2;\n  const points = xPoints.map((xp, i) => [xp, yPoints[i]]);\n  return {points, width: polygonWidth, height: polygonHeight};\n}\nexport function star({\n  side = 3,\n  innerRadius = 60 * Math.cos(Math.PI / side),\n}: SVGInterface,     container?: SVGAElement) {\n  return poly({...arguments[0], innerRadius}, container);\n}\nexport function poly({\n  left = 0,\n  top = 0,\n  right = 0,\n  bottom = 0,\n  strokeWidth,\n  strokeLinejoin = \"round\",\n  fill = \"transparent\",\n  side,\n  width,\n  height,\n  rotate,\n  innerRadius = 100,\n  ...attributes\n}: SVGInterface,     container: SVGElement = makeSVGDOM()) {\n  const {points, width: polygonWidth, height: polygonHeight } =\n    getRect({side, rotate, width, height, innerRadius, strokeLinejoin, strokeWidth});\n\n  const polygon: SVGPolygonElement = makeDOM(\"polygon\") as SVGPolygonElement;\n\n  if (container.getAttribute(\"class\") === CLASS_NAME) {\n    container.setAttribute(\"viewBox\", `0 0 ${left + polygonWidth + right} ${top + polygonHeight + bottom}`);\n  }\n  polygon.setAttribute(\"fill\", fill);\n  polygon.setAttribute(\"stroke-linejoin\", strokeLinejoin);\n  polygon.setAttribute(\"stroke-width\", `${strokeWidth}`);\n  polygon.setAttribute(\"points\", points.map(point => `${left + point[0]},${top + point[1]}`).join(\" \"));\n\n  for (const name in attributes) {\n    polygon.setAttribute(name, attributes[name]);\n  }\n  container.appendChild(polygon);\n  return container;\n}\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["CLASS_NAME","makeDOM","tag","document","createElementNS","getRect","_a","_b","side","_c","rotate","_d","innerRadius","_e","width","_f","height","_g","strokeLinejoin","_h","strokeWidth","xPoints","yPoints","sideCos","Math","cos","PI","startRad","i","rad","sin","push","minX","min","minY","maxX","max","maxY","scale","isOuter","outerScale","pos","map","xp","yp","polygonWidth","polygonHeight","points","poly","container","el","setAttribute","left","top","right","bottom","fill","attributes","_j","polygon","name","getAttribute","point","join","appendChild"],"mappings":";;;;;;;oYAMO,IAAMA,EAAa,cCW1B,SAASC,EAAQC,UACRC,SAASC,gBAAgB,6BAA8BF,YAQhDG,EAAQC,WACtBC,SAAAC,iBACAC,WAAAC,iBACAC,gBAAAC,mBACAC,UAAAC,iBACAC,WAAAC,iBACAC,mBAAAC,uBACAC,gBAAAC,iBAEIC,EAAoB,GACpBC,EAAoB,GAElBC,EAAUC,KAAKC,IAAID,KAAKE,GAAKlB,GAC7BmB,EAAWH,KAAKE,GAAK,IAAMhB,EAAUc,KAAKE,KAAOlB,EAAO,EAAI,EAAI,EAAIA,GAAQ,IAEzEoB,EAAI,EAAGA,EAAIpB,IAAQoB,EAAG,KACvBC,EAAML,KAAKE,IAAM,EAAIlB,EAAO,EAAIoB,GAAKD,EACrCF,EAAMD,KAAKC,IAAII,GACfC,EAAMN,KAAKM,IAAID,MAErBR,EAAQU,KAAKN,GACbH,EAAQS,KAAKD,GACO,MAAhBlB,EAAqB,IACnBW,GAAWX,EAAc,aAG3BS,EAAQU,KAAKnB,EAAc,IAAMY,KAAKC,IAAII,EAAML,KAAKE,GAAKlB,IAC1Dc,EAAQS,KAAKnB,EAAc,IAAMY,KAAKM,IAAID,EAAML,KAAKE,GAAKlB,SAI1DwB,EAAOR,KAAKS,UAALT,KAAYH,GACnBa,EAAOV,KAAKS,UAALT,KAAYF,GACnBa,EAAOX,KAAKY,UAALZ,KAAYH,GACnBgB,EAAOb,KAAKY,UAALZ,KAAYF,GAEnBgB,IADYxB,EACMA,GAASqB,EAAOH,GAAQhB,GAAUqB,EAAOH,GAC3DK,EAA6B,UAAnBrB,GAAiD,SAAnBA,GAAgD,eAAnBA,EACrEsB,EAAaD,GAAWD,EAAQlB,EAAc,GAAKkB,EAAQ,EAC3DG,EAAMF,EAAU,EAAInB,EAAc,EAExCC,EAAUA,EAAQqB,IAAI,SAAAC,UAAOA,EAAKX,EAAOQ,GAAcF,EAAQG,IAC/DnB,EAAUA,EAAQoB,IAAI,SAAAE,UAAOA,EAAKV,EAAOM,GAAcF,EAAQG,QAEzDI,GAAgBV,EAAOH,GAAQQ,EAAaF,EAAc,EAANG,EACpDK,GAAiBT,EAAOH,GAAQM,EAAaF,EAAc,EAANG,QAEpD,CAACM,OADO1B,EAAQqB,IAAI,SAACC,EAAIf,SAAM,CAACe,EAAIrB,EAAQM,MACnCd,MAAO+B,EAAc7B,OAAQ8B,YAQ/BE,EAAK1C,EAcA2C,GA3ErB,IACQC,gBAAAA,EAAKjD,EAAQ,QAEhBkD,aAAa,QAASnD,GAwENiD,EAvEZC,OA0DP3C,SAAA6C,iBACA3C,QAAA4C,iBACA1C,UAAA2C,iBACAzC,WAAA0C,iBACAnC,gBACAL,mBAAAG,uBACAD,SAAAuC,6BACAhD,SACAM,UACAE,WACAN,WACAS,gBAAAP,mBACA6C,gZAEMC,qFAACX,WAAQF,UAAqBC,WAG9Ba,EAA6B1D,EAAQ,eAUtC,IAAM2D,KARPX,EAAUY,aAAa,WAAa7D,GACtCiD,EAAUE,aAAa,UAAW,QAAOC,EAAOP,EAAeS,QAASD,EAAMP,EAAgBS,IAEhGI,EAAQR,aAAa,OAAQK,GAC7BG,EAAQR,aAAa,kBAAmBjC,GACxCyC,EAAQR,aAAa,eAAgB,GAAG/B,GACxCuC,EAAQR,aAAa,SAAUJ,EAAOL,IAAI,SAAAoB,UAAYV,EAAOU,EAAM,QAAMT,EAAMS,EAAM,MAAMC,KAAK,MAE7EN,EACjBE,EAAQR,aAAaS,EAAMH,EAAWG,WAExCX,EAAUe,YAAYL,GACfV,iCAtCY3C,EAGA2C,OAFnB1C,SAAAC,iBACAC,gBAAAG,6CAEOoC,OAJY1C,GAIWM,gBAAcqC,mBAoCvB"}